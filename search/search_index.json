{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Material for MkDocs","text":"<p>Welcome to Material for MkDocs.</p>"},{"location":"sql/","title":"SQL","text":""},{"location":"sql/#select","title":"Select","text":"<pre><code>SELECT * FROM tab;\nSELECT col1, col2 FROM tab;\n</code></pre>"},{"location":"sql/#sort","title":"Sort","text":"<pre><code>SELECT * FROM tab ORDER BY col1 ASC;\nSELECT * FROM tab ORDER BY col DESC;\n</code></pre>"},{"location":"sql/#filter","title":"Filter","text":"By condition<pre><code>SELECT * FROM tab WHERE col1 = 11;\nSELECT * FROM tab WHERE col1 = 11 AND col2 &gt; 5;\n</code></pre> Check null<pre><code>SELECT * FROM tab WHERE col1 IS NULL;\nSELECT * FROM tab WHERE col1 IS NOT NULL;\n</code></pre> Compare between columns<pre><code>SELECT * FROM tab WHERE col1 &gt; col2;\n</code></pre>"},{"location":"sql/#add-new-column-by-calculation","title":"Add new column by calculation","text":"<pre><code>SELECT col1, col2, col1/col2 AS new_col FROM tab;\n</code></pre>"},{"location":"sql/#aggregate","title":"Aggregate","text":"Group sum<pre><code>SELECT col1, SUM(col2) FROM tab GROUP BY col1;\n</code></pre> Group average<pre><code>SELECT col1, AVG(col2) FROM tab GROUP BY col1;\n</code></pre> Multiple<pre><code>SELECT col1, SUM(col2), MAX(col3) FROM tab GROUP BY col1;\n</code></pre>"},{"location":"sql/#joining","title":"Joining","text":"Inner<pre><code>SELECT * FROM tab1 INNER JOIN tab2 ON tab1.id = tab2.id;\n</code></pre> Left<pre><code>SELECT * FROM tab1 LEFT JOIN tab2 ON tab1.id = tab2.id;\n</code></pre>"},{"location":"R/","title":"R","text":""},{"location":"R/#cheatsheet","title":"Cheatsheet","text":"<ul> <li> dplyr - A powerful data manipulation tool for efficient data wrangling</li> <li> tidyr - Helps organize and reshape tidy data for analysis</li> <li> stringr \u2013 Simplifies string manipulation with a consistent set of functions</li> <li> purrr \u2013 A functional programming toolkit for iteration and mapping</li> <li> ggplot2 - A versatile package for creating elegant and informative graphics</li> <li> lubridate - Simplifies working with date-time and time-span data</li> <li> quarto - A publishing system for creating dynamic documents and reports</li> <li> shiny - Enables building interactive web applications with R</li> </ul>"},{"location":"R/base_r/","title":"Base r","text":""},{"location":"R/base_r/#all","title":"<code>all()</code>","text":"<p>Given a set of logical vectors, are all of the values true? <pre><code>if (all(cols_distinct %in% colnames(df_linelist)))\n</code></pre></p>"},{"location":"R/base_r/#libpaths","title":"<code>.libPaths()</code>","text":"<pre><code>if (!lib_path %in% .libPaths()) .libPaths(lib_path)\n</code></pre>"},{"location":"R/base_r/#assign","title":"<code>assign()</code>","text":"<p><pre><code>assign(\n    ha_name[i],\n    read_excel(\n        paste(folder, files_to_read[i], sep= \"/\"),\n        sheet=1,\n        guess_max = 100000\n        )%&gt;%\n        clean_names()\n        )\n</code></pre> <pre><code>c(\"ha\", \"hsda\", \"lha\") %&gt;%\n  walk(\n    .,\n    ~ eval(parse(text = paste0(.x, \"_map$region_name\"))) %&gt;%\n      unique %&gt;%\n      sort %&gt;%\n      assign(\n        x     = paste0(\"all_\", .x),\n        value = .,\n        envir = .GlobalEnv\n      )\n  )\n</code></pre></p>"},{"location":"R/base_r/#naomit","title":"<code>na.omit()</code>","text":"<p>removes all incomplete cases of a data object <pre><code>data &lt;- data.frame(x1 = c(9, 6, NA, 9, 2, 5, NA),     \n                   x2 = c(NA, 5, 2, 1, 5, 8, 0),      \n                   x3 = c(1, 3, 5, 7, 9, 7, 5))\nna.omit(data) \n</code></pre></p>"},{"location":"R/base_r/#basename-and-dirname","title":"<code>basename()</code> and <code>dirname()</code>","text":"<pre><code>basename(file.path(\"\",\"p1\",\"p2\",\"p3\", c(\"file1\", \"file2\")))\ndirname(file.path(\"\",\"p1\",\"p2\",\"p3\",\"filename\"))\n</code></pre>"},{"location":"R/base_r/#listfiles","title":"<code>list.files()</code>","text":"load everything that follows a name pattern<pre><code>here::here('script/funcs') %&gt;% \n  list.files('.R$', full.names = T) %&gt;% \n  walk(source, local = globalenv())\n\nsapply(\n  list.files(\n    here::here('B_script/funcs'),\n    pattern = 'R$',\n    full.names = T\n  ),\n  source\n)\n</code></pre> <pre><code>file &lt;- file_path %&gt;%\n    list.files(\n        pattern    = file_name_pattern,\n        full.names = T\n        ) %&gt;% \n        sort(decreasing = T) %&gt;% \n        file.info() %&gt;% \n        mutate(\n          .keep = 'none',\n          path  = rownames(.),\n          name  = basename(path),\n          ctime = ctime,\n        ) %&gt;% \n        filter(as.Date(ctime) == Sys.Date())\n</code></pre>"},{"location":"R/base_r/#attach","title":"<code>attach()</code>","text":"load data into a deparate environment<pre><code>attach(here::here(df_path.RData), name = 'temp_env')\n</code></pre>"},{"location":"R/base_r/#exit-handler-onexit","title":"Exit handler: <code>on.exit()</code>","text":"<p>the exit handler is run regardless of whether the function exits normally or with an error. <pre><code>j06 &lt;- function(x) {\n  cat(\"Hello\\n\")\n  on.exit(cat(\"Goodbye!\\n\"), add = TRUE)\n\n  if (x) {\n    return(10)\n  } else {\n    stop(\"Error\")\n  }\n}\n</code></pre></p>"},{"location":"R/some_tips/","title":"Some tips","text":""},{"location":"R/some_tips/#rewriting-to-prefix-form","title":"Rewriting to prefix form","text":"<pre><code>x + y\n`+`(x, y)\n\nnames(df) &lt;- c(\"x\", \"y\", \"z\")\n`names&lt;-`(df, c(\"x\", \"y\", \"z\"))\n\nfor(i in 1:10) print(i)\n`for`(i, 1:10, print(i))\n\n`%+%` &lt;- function(a, b) paste0(a, b)\n\"new \" %+% \"string\"\n</code></pre>"},{"location":"R/some_tips/#timing-utlilties","title":"Timing utlilties","text":"Timing multiple steps<pre><code>library(tictoc)\ntic(\"step 1\")\nprint(\"Do something...\")\nSys.sleep(1)\ntoc()\n# step 1: 1.005 sec elapsed\n\ntic(\"step 2\")\nprint(\"Do something...\")\nSys.sleep(1)\ntoc()\n# step 2: 1.004 sec elapsed\n</code></pre>"},{"location":"R/strings/","title":"Strings","text":""},{"location":"R/strings/#format-numbers","title":"Format numbers","text":"<pre><code>sprintf(\"%02.1f%%\", your_number) # (1)\n# Output: \"xxxx.x%\"\n\nsprintf(\"Pi to 3 decimal places: %.3f\", pi)\n# Output: \"Pi to 3 decimal places: 3.142\"\n\nsprintf(\"Scientific notation of Pi: %e\", pi) # (2)\n# Output: \"Scientific notation of Pi: 3.141593e+00\"\n\nsprintf(\"%s is %d years old\", \"Alice\", 25) # (3)\n# Output: \"Alice is 25 years old\"\n</code></pre> <ol> <li> <ul> <li>%%: Literal %</li> <li>%f: Double precision value in fixed-point notation</li> </ul> </li> <li>%e, %E: Double precision value in exponential notation</li> <li> <ul> <li>%d, %i: Integer value</li> <li>%s: Character string</li> </ul> </li> </ol>"},{"location":"R/strings/#regular-expression","title":"Regular expression","text":"Extract anything between certain words<pre><code>stringr::str_extract_all(\n          string  = .x,\n          pattern = \"(?&lt;=using last ).+(?= days)\" # between the word 'using last ' and ' days'\n        )\n</code></pre> substitute the last dash with nothing<pre><code>sub('-[^-]*$', '', sentence) # (1)\n</code></pre> <ol> <li>matching a dash followed by zero or more characters that are not a dash till the end ($) of the string and replace it with blank ('')</li> </ol>"},{"location":"R/strings/#replace","title":"Replace","text":"<pre><code># Replace multiple strings at a time\nrep_str = c('St'='Street','Blvd'='Boulevard','Pkwy'='Parkway')\ndf$address &lt;- str_replace_all(df$address, rep_str)\n</code></pre>"},{"location":"R/strings/#string-pad","title":"String pad","text":"<p>Pad a string to a fixed width. <pre><code>rbind(\n  str_pad(string = \"hadley\", width = 30, side = \"left\",pad = \".\"),\n  str_pad(\"hadley\", 30, \"right\"),\n  str_pad(\"hadley\", 30, \"both\")\n)\n\n# All arguments are vectorised except side\nstr_pad(c(\"a\", \"abc\", \"abcdef\"), 10)\nstr_pad(\"a\", c(5, 10, 20))\nstr_pad(\"a\", 10, pad = c(\"-\", \"_\", \" \"))\n</code></pre></p> <pre><code>data %&gt;% pwalk(\n        .,\n        ~ cat(str_pad(..2, 18, side = 'right', '.'), ..3, '\\n') \n        #..2 = col #2 as the string, side = put pad at right\n      )\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/","title":"R data analysis","text":""},{"location":"R/data_analysis/r_data_analysis/#deal-with-na","title":"Deal with NA","text":""},{"location":"R/data_analysis/r_data_analysis/#replace-na-with-0","title":"replace NA with 0","text":"<pre><code>df %&gt;%\n    purrr::map(\n        .,\n        ~ dplyr::mutate(across(everything(), ~ ifelse(is.na(.x), 0, .x)))\n    )\n\ndf %&gt;%\n    purrr::map(\n        ~ dplyr::mutate(across(everything(), ~ tidyr::replace_na(.x, 0)))\n    )\n\ndf %&gt;%\n  dplyr::mutate_at(\n    dplyr::vars(count),\n      ~ tidyr::replace_na(.x, 0)\n    )\n\ndf %&gt;%\n  dplyr::mutate_if(\n    is.numeric,\n    funs(tidyr::replace_na(.,0))\n    )\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#replace-all-blanks-with-na","title":"replace all blanks with na","text":"<pre><code>df %&gt;% apply(2, function(x) gsub(\"^$\", NA, trimws(x)))\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#replace-unknnown-with-na","title":"replace 'unknnown' with na","text":"<pre><code>starwars %&gt;%\n   mutate(across(where(is.character), ~na_if(., \"unknown\")))\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#filter-the-number-of-na-on-certain-columns","title":"Filter the number of NA on certain columns","text":"<pre><code>data %&gt;% \n  filter(\n    str_detect(\n      col_name, '^(ha|test_outcome|result_dt_tm)$', negate = T\n    ),\n    n_missing != 0\n  )\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#fill-in-missing-values-with-previous-or-next-value","title":"Fill in missing values with previous or next value","text":"<p>The values are inconsistently missing by position within the group. Use .direction = \"downup\" to fill missing values in both directions <pre><code>df %&gt;%\n  dplyr::group_by(group) %&gt;%\n  tidyr::fill(count, .direction = \"downup\") %&gt;%\n  dplyr::ungroup()\n</code></pre></p>"},{"location":"R/data_analysis/r_data_analysis/#remove-columns-with-all-nas","title":"Remove columns with all NAs","text":"<pre><code>df %&gt;% dplyr::select_if(~ !all(is.na(.)))\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#deal-with-date-format","title":"Deal with date format","text":"change all columns contain \"DATE\" as date format<pre><code>dplyr::mutate_at(\n      vars(contains(\"DATE\")),\n      ~ as.Date(.x, format = \"%Y-%m-%d\")\n      )\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#select-columns","title":"Select columns","text":"<pre><code>dplyr::select(matches('date|dt_tm'))\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#summarize-columns","title":"Summarize Columns","text":"<p>Calculate the number of records with death date later than the current date, the maximum and minimum for age and death date, and number of records with death age over 100 <pre><code>df &lt;- tibble::tibble(id = c(1L, 2L, 3L, 4L),\n             death_date = c('2025-01-03', '2025-01-04', '2025-01-05', '2099-01-01'), \n             age = c(20, 50, 60, 125))\n\ndf %&gt;% \n  dplyr::summarise(\n    dplyr::across(c(death_date), \n           ~ sum(.x &gt; Sys.Date(), na.rm = T),\n           .names = 'count_{col}'),\n    dplyr::across(c(death_date, age), \n           ~ as.character(min(.x, na.rm = T)),\n           .names = 'min_{col}'),\n    dplyr::across(c(death_date, age), \n           ~ as.character(max(.x, na.rm = T)),\n           .names = 'max_{col}'),\n    dplyr::across(c(age), \n           ~ sum(.x &gt; 100, na.rm = T),\n           .names = 'count_{col}'),\n  ) %&gt;% \n  tidyr::pivot_longer(\n    cols = everything(),\n    names_pattern = '(min|max|count)_(.*)',\n    names_to      = c('.value', 'date_type')\n  )\n</code></pre></p>"},{"location":"R/data_analysis/r_data_analysis/#reshape-data","title":"Reshape data","text":""},{"location":"R/data_analysis/r_data_analysis/#pivot-data-from-wide-to-long","title":"Pivot data from wide to long","text":"<pre><code>tib &lt;- tibble::tibble(type = c(1L, 1L, 1L, 2L, 2L, 2L), \n              id = c(1L, 2L, 3L, 1L, 2L, 3L), \n              age2000 = c(20L, 35L, 24L, 32L, 66L, 14L), \n              age2001 = c(21L, 36L, 25L, 33L, 67L, 15L),\n              age2002 = c(22L, 37L, 26L, 34L, 68L, 16L),\n              bool2000 = c(1L, 2L, 1L, 2L, 2L, 1L),\n              bool2001 = c(1L, 2L, 1L, 2L, 2L, 1L),\n              bool2002 = c(1L, 2L, 1L, 2L, 2L, 1L))\n\ntidyr::pivot_longer(tib,\n             cols = -c(id, type), # (1)\n             names_to = c('.value', 'year'), # (2)\n             names_pattern = '([a-z]+)(\\\\d+)') # (3)\n</code></pre> <ol> <li>Specifies that all columns except id and type should be pivoted (these columns remain unchanged).</li> <li>This splits the column names into two new variables:<ul> <li>'.value': The part of the column name that matches the pattern ([a-z]+) (e.g., \"age\" or \"bool\") becomes the new \"value\" column names (age, bool).</li> <li>'year': The numeric part matching (\\d+) (e.g., \"2000\", \"2001\") is extracted into a new column named year.</li> </ul> </li> <li>Defines the pattern for splitting column names. It looks for:<ul> <li>A sequence of lowercase letters ([a-z]+)</li> <li>A sequence of digits (\\d+)</li> </ul> </li> </ol>"},{"location":"R/data_analysis/r_data_analysis/#split-date-into-a-list-by-a-column-value","title":"split date into a list by a column value","text":"<pre><code>df %&gt;%\n  # split by indicator and set name\n  dplyr::group_split(\n    indicator, # (1)\n    .keep = T  # (2)\n  ) %&gt;%\n  # set names\n  purrr::set_names(\n    purrr::map_chr(\n      ., \n      ~ .x$indicator[1] # (3)\n      )\n  )\n</code></pre> <ol> <li>the grouped variable</li> <li><code>TRUE</code> if want to keep the grouped variable</li> <li>Set the name of data within the list</li> </ol>"},{"location":"R/data_analysis/r_data_analysis/#rename-columns","title":"Rename columns","text":""},{"location":"R/data_analysis/r_data_analysis/#add-suffix-for-multiple-column-names","title":"Add suffix for multiple column names","text":"<pre><code>dplyr::rename_at(vars(BC:Interior),function(x) paste0(x,\"_24\"))\ndplyr::rename_at(vars(-class), ~ paste0(., \"_2014\"))\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#change-all-column-names-to-title-style-except-those-start-with-hsda","title":"Change all column names to title style except those start with hsda","text":"<p>\u00b7\u00b7\u00b7r df %&gt;% dplyr::rename_with(str_to_title, !starts_with(\"hsda\")) \u00b7\u00b7\u00b7</p>"},{"location":"R/data_analysis/r_data_analysis/#add-prefix-to-columns-that-start-with-nonexistent","title":"Add prefix to columns that start with \"nonexistent\"","text":"<pre><code>rename_with(\n  iris,\n  ~ paste0(\"prefix_\", .x, recycle0 = TRUE),\n  starts_with(\"nonexistent\")\n)\n</code></pre>"},{"location":"R/data_analysis/r_data_analysis/#rename-columns-with-names-ending-in-test-to-test","title":"Rename columns with names ending in \"test\" to \"Test\".","text":"<pre><code>dplyr::rename_with(df, ~ 'Test', matches('test$'))\n</code></pre>"},{"location":"R/officer/build_excel/","title":"Build excel","text":""},{"location":"R/officer/build_excel/#create-workbook","title":"Create Workbook","text":"<pre><code>wb &lt;- createWorkbook()\n</code></pre>"},{"location":"R/officer/build_excel/#add-worksheet","title":"Add Worksheet","text":"<pre><code>addWorksheet(\n    wb,\n    sheet = \"Sheet1\", # name for the new worksheet\n    gridLines = FALSE # hide worksheet grid lines\n    )\n</code></pre>"},{"location":"R/officer/build_excel/#write-data","title":"Write Data","text":"<pre><code>floor_date(Sys.Date(), unit = \"week\") %&gt;% {\n    this_wed &lt;&lt;- format(`+`(., days(3)), \"%B %d, %Y\")\n    this_thur &lt;&lt;- format(`+`(., days(4)), \"%B %d, %Y\")\n}\n\nwriteData(\n    wb,\n    sheet = \"Sheet1\",\n    paste0(\n        \"The summary for Thursday, \",\n        this_thur,\n        \" can be found below and includes data up to end-of-day \",\n        this_wed,\n        \".\"\n    ),\n    startCol = 1,\n    startRow = i\n)\n</code></pre>"},{"location":"R/officer/build_excel/#add-style","title":"Add Style","text":"<pre><code>title_style &lt;- createStyle(\n    fontSize = 15,\n    textDecoration = c(\"bold\", \"underline\"),\n    fontColour = \"#0F0E0E\",\n    bgFill = \"white\",\n    halign = \"left\", # Horizontal alignment of cell contents\n    valign = \"center\", # Vertical alignment of cell contents\n    wrapText = FALSE # If TRUE cell contents will wrap to fit in column.\n)\n\naddStyle(\n    wb,\n    sheet = \"Sheet1\",\n    style = title_style,\n    rows = i,\n    cols = 1\n)\n</code></pre>"},{"location":"R/officer/build_excel/#set-the-width-of-the-column","title":"Set the width of the column","text":"<pre><code>setColWidths(wb, sheet = \"Sheet1\", cols = 1:2, widths = 32)\n</code></pre>"},{"location":"R/officer/build_excel/#set-up-the-time-format","title":"Set up the time format","text":"<pre><code>options(\"openxlsx.datetimeFormat\" = \"yyyy-mm-dd\")\n</code></pre>"},{"location":"R/officer/build_excel/#save-workbook","title":"Save Workbook","text":"<pre><code>saveWorkbook(\n    wb,\n    \"test.xlsx\",\n    overwrite = TRUE\n    )\n</code></pre>"},{"location":"R/officer/build_ppt/","title":"Build ppt","text":""},{"location":"R/officer/build_ppt/#create-ppt-template","title":"Create ppt template","text":"<ol> <li><code>View</code> &gt; <code>Master Views</code> &gt; <code>Slide Master</code></li> <li><code>Slide Master</code> &gt; <code>Insert Slide Master</code></li> <li><code>Insert Placeholder</code></li> <li><code>Home</code> &gt; <code>Editing</code> &gt; <code>Select</code> &gt; <code>Selection panel</code> &gt; rename/move/delete</li> </ol>"},{"location":"R/officer/build_ppt/#create-slide","title":"Create slide","text":"<ul> <li> <p>Create blank slide <pre><code>doc &lt;- read_pptx()\n</code></pre></p> </li> <li> <p>Read in template <pre><code>doc &lt;- read_pptx(path = here(\"template.pptx\"))\n</code></pre></p> </li> </ul>"},{"location":"R/officer/build_ppt/#add-slide","title":"Add slide","text":"<pre><code>doc &lt;- add_slide(\n    doc,\n    layout = \"Slide1\", # layout name in the template\n    master = \"Office Theme\"\n    )\n</code></pre>"},{"location":"R/officer/build_ppt/#add-textggplotflextable-in-the-slide","title":"Add text/ggplot/flextable in the slide","text":"<ul> <li> <p>Use template to locate <pre><code>doc &lt;- ph_with(\n    doc,\n    value = format(Sys.Date(), \"%B %d, %Y\"),\n    location = ph_location_label(\"date\") # placeholder name in the template\n    )\n</code></pre></p> </li> <li> <p>Use index to locate <pre><code>ph_with(\n    value = indicator_ftbl$ed_visit,\n    location = ph_location(left = 0.36, top = 1.3)\n)\n</code></pre></p> </li> </ul>"},{"location":"R/officer/build_ppt/#add-external-image","title":"Add external image","text":"<pre><code>ph_with(\n    value = external_img(\"plot_.png\"), # width = 9.2, height = 5.6\n    location = ph_location_label(\"content\"),\n    use_loc_size = FALSE # if set to FALSE, external_img width and height will be used\n    )\n</code></pre>"},{"location":"R/officer/build_ppt/#add-hyperlink","title":"Add hyperlink","text":"<pre><code>  link_text &lt;- fpar(\n    ftext(\"xxx (\"),\n    hyperlink_ftext(text = \"Link\", href = \"https://xxxx\"),\n    ftext(\")\")\n  )\n</code></pre>"},{"location":"R/officer/build_ppt/#add-bullet-points","title":"Add bullet points","text":"<pre><code>  bullet_points &lt;- unordered_list(\n    c(\n      \"A\",\n      \"B\",\n      \"bbb\",\n      \"C\"\n    ),\n    level_list = c(1, 1, 2, 1)\n  )\n</code></pre>"},{"location":"R/officer/build_ppt/#export","title":"Export","text":"<pre><code>print(\n  ppt,\n  here::here(\"test.pptx\")\n  )\n</code></pre>"},{"location":"R/officer/build_word/","title":"Build word","text":""},{"location":"R/officer/build_word/#setup-text-formatting-properties","title":"Setup text formatting properties","text":"<ul> <li> <p>Title property <pre><code>title_style &lt;- fp_text(\n    font.size = 10.5,\n    font.family = \"Arial\",\n    bold = TRUE\n    )\n</code></pre></p> </li> <li> <p>Superscript property <pre><code>sup_style &lt;- fp_text(\n    vertical.align = \"superscript\",\n    font.family = \"Arial\",\n    font.size = 10\n    )\n</code></pre></p> </li> </ul>"},{"location":"R/officer/build_word/#create-word-documents","title":"Create Word documents","text":"<ul> <li> <p>Create blank doc <pre><code>doc &lt;- read_docx()\n</code></pre></p> </li> <li> <p>Read in template <pre><code>doc &lt;- read_docx(path = here(\"template.docx\"))\n</code></pre></p> </li> </ul>"},{"location":"R/officer/build_word/#insert-text","title":"Insert text","text":"<ul> <li> <p>Prepare formatted text with properties   <pre><code># Title\n  table1_title &lt;- fpar(\n  ftext(\"Table 1. \", prop = bold_style),\n  ftext(\n      paste0(\n      \"Number of cases (n=\",\n      nrow(df),\n      \")\"\n      ),\n      prop = title_font\n  ),\n  fp_p = fp_par(padding.bottom = 10) # add padding to the bottom\n  )\n\n# Footnote\n  fig2_footnote &lt;- fpar(\n  ftext(\"1\", prop = sup_style),\n  ftext(\n      \" footnote placeholder\",\n      prop = footnote_style\n  ),\n  run_linebreak(), # line break\n  ftext(\"2\", prop = sup_style),\n  ftext(\n      \" footnote placeholder\",\n      prop = footnote_style\n  )\n  )\n</code></pre></p> </li> <li> <p>Insert formatted text into Word doc <pre><code>doc &lt;- body_add_fpar(\n  doc,\n  value = table1_title\n)\n</code></pre></p> </li> <li> <p>Insert an empty line <pre><code>doc &lt;- body_add_par(doc, \"\")\n</code></pre></p> </li> <li> <p>Insert multiple empty lines <pre><code># Or use function\n\nadd_empty_lines &lt;- function(doc, n) {\n  for (i in seq_len(n)) {\n    doc &lt;- body_add_par(doc, \"\")\n  }\n  doc\n}\n\ndoc &lt;- add_empty_lines(doc, 3)\n</code></pre></p> </li> </ul>"},{"location":"R/officer/build_word/#insert-flextable","title":"Insert flextable","text":"<pre><code>doc &lt;- body_add_flextable(doc, ftbl)\n</code></pre>"},{"location":"R/officer/build_word/#insert-ggplot-figures","title":"Insert ggplot figures","text":"<pre><code>doc &lt;- body_add_gg(\n    doc,\n    value = ggplot,\n    width = 6.5,\n    height = 3.8,\n    res = 300,\n    style = \"centered\"\n    )\n</code></pre>"},{"location":"R/officer/build_word/#add-page-break","title":"Add page break","text":"<pre><code>doc &lt;- body_add_break(doc)\n</code></pre>"},{"location":"R/officer/build_word/#move-cursor","title":"Move cursor","text":"<ul> <li>Set the cursor at the beginning of the document, on the first element of the document <pre><code>doc &lt;- cursor_begin(doc)\n</code></pre></li> <li>Set the cursor at a bookmark that has previously been set <pre><code>doc &lt;- cursor_bookmark(doc, \"second_page\")\n</code></pre></li> </ul>"},{"location":"R/officer/build_word/#export-doc","title":"Export doc","text":"<pre><code>  print(\n    doc,\n    \"test.docx\"\n  )\n</code></pre>"},{"location":"R/oop_in_r/s3/","title":"S3","text":""},{"location":"R/oop_in_r/s3/#s3-introduction","title":"S3 Introduction","text":"<ul> <li>S3 is the simplest and most informal OOP system in R. </li> <li>It does not have a formal definition.</li> <li>It relies on generic functions to dispatch methods based on the class of the object. </li> </ul>"},{"location":"R/oop_in_r/s3/#generic-function","title":"Generic Function","text":"<ul> <li>A generic function is a collection of various functions/methods that are created for different data types.</li> <li>It calls the appropriate function depending on the type of object passed as an argument.</li> <li>Examples: <code>plot()</code>, <code>print()</code>, <code>anova()</code>, and <code>summary()</code></li> <li><code>methods(summary)</code></li> </ul> <pre><code># Create a generic function\nclean_data &lt;- function(x) {\n  UseMethod(\"clean_data\")\n}\n\n# for numeric class\nclean_data.numeric &lt;- function(x) {\n  return(x-1)\n}\n\n# character class\nclean_data.character &lt;- function(x) {\n  return(nchar(x))\n}\n\n# for list class\nclean_data.list &lt;- function(x) {\n  return(purrr::reduce(x, paste0))\n}\n\n# for self-defined class\nclean_data.flu &lt;- function(x){\n  temp &lt;- dplyr::mutate(x, date_clean = as.Date(date, format = \"%Y%m%d\"))\n  return(temp)\n}\n\n# Test the function\nclean_data(1)\nclean_data(\"test\")\nclean_data(list(\"1\", 2, \"a\", \"b\"))\n\nflu_raw &lt;- data.frame(\n  id = c(\"001\", \"002\", \"003\"),\n  date = c(\"20250101\", \"20250102\", \"20250103\")\n)\n\nclass(flu_raw) &lt;- c(\"flu\", class(flu_raw))\n\nclean_data(flu_raw)\n</code></pre>"},{"location":"R/oop_in_r/s4/","title":"S4","text":""},{"location":"R/oop_in_r/s4/#s4-introduction","title":"S4 Introduction","text":"<ul> <li>S4 is stricter than S3.</li> <li>It has a formal definition and a uniform way to create objects.</li> <li>Slots: properties of objects. Similar to attributes in JAVA</li> </ul>"},{"location":"R/oop_in_r/s4/#define-s4-class","title":"Define S4 class","text":"<pre><code>student &lt;- setClass(\"student\", slots = list(name = \"character\", age = \"numeric\"))\n</code></pre>"},{"location":"R/oop_in_r/s4/#create-s4-object","title":"Create S4 Object","text":"method 1<pre><code>student1 &lt;- new(\"student\", name = \"John\", age = 18)\n</code></pre> <p>The function setClass() returns a generator function, which can be used to create new objects. method 2<pre><code>student2 &lt;- student(name = \"Linda\", age = 17)\n</code></pre></p>"},{"location":"R/oop_in_r/s4/#access-and-modify-slots","title":"Access and modify slots","text":"access slot<pre><code>student2@name\n</code></pre> rewrite slot directly<pre><code>student2@age &lt;- 20\n</code></pre> rewrite with slot() function<pre><code>slot(student2, \"age\") &lt;- \"20\"\n</code></pre>"},{"location":"R/oop_in_r/s4/#list-all-generic-functions","title":"List all generic functions","text":"<pre><code>showMethods()\n</code></pre>"},{"location":"R/oop_in_r/s4/#customize-s4-methods","title":"Customize S4 methods","text":"<pre><code>setGeneric(\"print_info\", function(object) standardGeneric(\"print_info\"))\n\nsetMethod(\n  \"print_info\",\n  \"student\",\n  function(object) {\n    cat(\"Name:\", object@name, \"\\n\")\n    cat(\"Age:\", object@age, \"years old\\n\")\n    }\n)\n</code></pre>"},{"location":"R/oop_in_r/s4/#inheritance","title":"Inheritance","text":"<pre><code>international_student &lt;- setClass(\"international_student\", \n         contains = \"student\", \n         slots = c(\n           Country = \"character\",\n           teammate = \"student\"\n         )\n)\nstudent3 &lt;- international_student(name = \"X\", age = 17, Country = \"Canada\", teammate = student1)\n</code></pre>"},{"location":"R/packages/dplyr/","title":"Dplyr","text":""},{"location":"R/packages/dplyr/#group_split","title":"<code>group_split()</code>","text":"<pre><code>df %&gt;%\n  # split by indicator and set name\n  dplyr::group_split(\n    indicator, # by\n    .keep = T  # if keep the grouped variable\n  ) %&gt;%\n  # set names\n  purrr::set_names(\n    purrr::map_chr(\n      ., \n      ~ .x$indicator[1]\n      )\n  )\n</code></pre>"},{"location":"R/packages/dplyr/#mutate","title":"<code>mutate()</code>","text":""},{"location":"R/packages/dplyr/#mutate_at","title":"<code>mutate_at()</code>","text":"<p>affects variables selected with a character vector or vars() <pre><code>scale2 &lt;- function(x, na.rm = FALSE) (x - mean(x, na.rm = na.rm)) / sd(x, na.rm)\nstarwars %&gt;% mutate_at(c(\"height\", \"mass\"), scale2)\nstarwars %&gt;% mutate(across(c(\"height\", \"mass\"), scale2))\n</code></pre></p>"},{"location":"R/packages/dplyr/#mutate_if","title":"<code>mutate_if()</code>","text":"<p>affects variables selected with a predicate function <pre><code>tbl %&gt;% mutate_if(is.numeric, funs(replace_na(.,0)))\n\niris %&gt;%\n  as_tibble() %&gt;%\n  mutate(across(where(is.numeric), list(scale = scale2, log = log)))\n</code></pre></p>"},{"location":"R/packages/dplyr/#rename","title":"<code>rename()</code>","text":""},{"location":"R/packages/dplyr/#rename_at","title":"<code>rename_at()</code>","text":"<pre><code>dplyr::rename_at(vars(BC:Interior), function(x) paste0(x,\"_24\"))\ndplyr::rename_at(vars(-class), ~ paste0(., \"_2014\"))\n</code></pre>"},{"location":"R/packages/dplyr/#rename_with","title":"<code>rename_with()</code>","text":"<pre><code>rename_with(\n  iris,\n  ~ paste0(\"prefix_\", .x, recycle0 = TRUE),\n  starts_with(\"nonexistent\")\n)\n\ndata %&gt;% \n  rename_with(\n    .cols = matches('tally'),\n    .fn   = ~ str_remove(.x, 'tally_')\n  )\n</code></pre> <pre><code># change all column names to title style except start with hsda\ndf %&gt;% rename_with(str_to_title, !starts_with(\"hsda\"))\n\n# change all `ha` to `residential_ha` in column names\ndf %&gt;% rename_with(~ 'residential_ha', matches('ha$'))\n</code></pre>"},{"location":"R/packages/dplyr/#relocate","title":"<code>relocate()</code>","text":"<pre><code>relocate(df, date_end, .after = date_start)\n</code></pre>"},{"location":"R/packages/dplyr/#set-options","title":"Set options","text":""},{"location":"R/packages/dplyr/#intersection-a-cap-b","title":"Intersection \\(A \\cap B\\)","text":"<p><code>intersect(A, B)</code> finds all rows in both A and B.</p> <p><code>inner_join(A, B)</code> only keeps observations from xA that have a matching key in B. Same with base r: <code>merge(A, B)</code></p>"},{"location":"R/packages/dplyr/#union-a-cup-b","title":"Union \\(A \\cup B\\)","text":"<p><code>union(A, B)</code> finds all rows in either A or B, excluding duplicates.</p> <p><code>union_all(A, B)</code> finds all rows in either A or B, including duplicates.</p> <p><code>semi_join(A, B)</code> returns all rows from x with a match in y. Same with base r: <code>A[A$x %in% B$x, , drop = FALSE]</code></p> <p><code>full_join(A, B)</code> keeps all observations in A and B. Same with base r: <code>merge(A, B, all = TRUE)</code></p>"},{"location":"R/packages/dplyr/#set-difference-a-b","title":"Set difference \\(A-B\\)","text":"<p><code>setdiff(A, B)</code> finds all rows in A that aren't in B.</p> <p><code>anti_join(A, B)</code> returns all rows from A without a match in B. Same with base r: <code>A[!A$x %in% B$x, , drop = FALSE]</code></p>"},{"location":"R/packages/dplyr/#symmetric-difference-a-delta-b","title":"Symmetric difference \\(A \\Delta B\\)","text":"<p><code>symdiff(A, B)</code> computes the symmetric difference, i.e. all rows in A that aren't in B and all rows in B that aren't in A.</p>"},{"location":"R/packages/furrr/","title":"Furrr","text":"<p>The combination of map and future (parallel processing)</p>"},{"location":"R/packages/furrr/#futureplan","title":"future::plan()","text":"<p>specifies how future():s are resolved, e.g. sequentially or in parallel. <pre><code>plan(sequential) # (1)\nplan(multisession, workers = 3) # (2)\n</code></pre></p> <ol> <li>sequential: Resolves futures sequentially in the current R process</li> <li>multisession: Resolves futures asynchronously (in parallel) in separate R sessions running in the background on the same machine</li> </ol>"},{"location":"R/packages/furrr/#implementation-examples","title":"implementation examples","text":"<pre><code>df &lt;- data.frame(\n  x = c(\"apple\", \"banana\", \"cherry\"),\n  pattern = c(\"p\", \"n\", \"h\"),\n  replacement = c(\"x\", \"f\", \"q\"),\n  stringsAsFactors = FALSE\n)\n\nfuture_pmap(df, gsub)\nfuture_pmap_chr(df, gsub)\n</code></pre>"},{"location":"R/packages/furrr/#close-open-connections","title":"close open connections","text":"<pre><code>if (!inherits(plan(), \"sequential\")) plan(sequential)\n</code></pre>"},{"location":"R/packages/purrr/","title":"Purrr","text":""},{"location":"R/packages/purrr/#implementation","title":"Implementation","text":""},{"location":"R/packages/purrr/#run-multiple-functions-with-the-same-parameters","title":"Run multiple functions with the same parameters","text":"<pre><code>x &lt;- c(runif(10), NA)\nfuns &lt;- c(\"mean\", \"median\", \"sd\")\n\npurrr::map_dbl(funs, exec, x, na.rm = TRUE)\n</code></pre>"},{"location":"R/packages/purrr/#functions","title":"Functions","text":""},{"location":"R/packages/purrr/#pluck","title":"pluck()","text":"<p>get or set an element deep within a nested data structure <pre><code>x &lt;- list(\n  list(\"a\", list(1, elt = \"foo\")),\n  list(\"b\", list(2, elt = \"bar\"))\n  )\n\npluck(x, 1, 2) # (1)\n</code></pre></p> <ol> <li>Same as <code>x[[1]][[2]]</code></li> </ol>"},{"location":"R/packages/purrr/#compact","title":"compact()","text":"<p>compact() discards elements where .p evaluates to an empty vector <pre><code>list(a = \"a\", b = NULL, c = integer(0), d = NA, e = list()) %&gt;%\n  compact()\n</code></pre></p>"},{"location":"R/packages/purrr/#flatten","title":"flatten()","text":"<p>Flattening a list removes a single layer of internal hierarchy, i.e. it inlines elements that are lists leaving non-lists alone. <pre><code>list(1, list(), 2, list(3)) |&gt; list_flatten()\n</code></pre></p>"},{"location":"R/packages/rlang/","title":"Rlang","text":""},{"location":"R/packages/rlang/#tidy-dots-features","title":"Tidy dots features","text":"<pre><code>my_cases &lt;-   rlang::quos(\n    Species == \"setosa\" ~ \"S\", \n    TRUE ~ \"other\"\n    )\n\nout &lt;-  tiris %&gt;% \n            mutate(new_lable = case_when(!!! my_cases))\n</code></pre>"},{"location":"R/packages/rlang/#curly-curly-abstracts-quote-and-unquote-into-a-single-interpolation-step","title":"<code>curly-curly()</code>: abstracts quote-and-unquote into a single interpolation step","text":"quote and unquote version<pre><code>max_by &lt;- function(data, var, by) {\n  data %&gt;%\n    group_by(!!enquo(by)) %&gt;%\n    summarise(maximum = max(!!enquo(var), na.rm = TRUE))\n}\n\nstarwars %&gt;% max_by(mass, by = gender)\n</code></pre> curly-curly version<pre><code>max_by &lt;- function(data, var, by) {\n  data %&gt;%\n    group_by({{ by }}) %&gt;%\n    summarise(maximum = max({{ var }}, na.rm = TRUE))\n}\n\nstarwars %&gt;% max_by(var = height, by = gender)\n</code></pre>"},{"location":"R/packages/rlang/#env-create-a-new-environment","title":"<code>env()</code>: Create a new environment","text":"<pre><code>e1 &lt;- rlang::env(a = 1, b = 2, c = 3)\ne1$a\n</code></pre> put a list into an environment<pre><code>objs &lt;- list(b = \"foo\", c = \"bar\")\nenv &lt;- env(a = 1, !!! objs)\nenv$c\n</code></pre> assign values with the definition operator :=<pre><code>var &lt;- \"a\"\nenv &lt;- env(!!var := \"A\")\nenv$a\n</code></pre>"},{"location":"R/packages/rlang/#exec-execute-functions","title":"<code>exec()</code>: Execute functions","text":"<pre><code>exec(\"mean\", x = 1:10, na.rm = TRUE, trim = 0.1)\n</code></pre> Using dots features<pre><code>args &lt;- list(x = 1:10, na.rm = TRUE, trim = 0.1)\nexec(\"mean\", !!!args)\n</code></pre> <p><code>r title = 'assign values with the definition operator :=' arg_name &lt;- \"na.rm\" arg_val &lt;- TRUE exec(\"mean\", 1:10, !!arg_name := arg_val)</code></p>"},{"location":"R/shiny/r_shiny/","title":"R shiny","text":"<p>R shiny</p>"},{"location":"git/customizing_git/","title":"Customizing git","text":""},{"location":"git/customizing_git/#configuration","title":"Configuration","text":""},{"location":"git/customizing_git/#user-name-and-email-configuration","title":"User name and email configuration","text":"<pre><code>git config --global user.name \"your_name\"  \ngit config --global user.email \"your_email@gmail.com\"\ngit config --list \n</code></pre>"},{"location":"git/customizing_git/#case-sensitive","title":"Case sensitive","text":"<pre><code>git config core.ignorecase false\n</code></pre>"},{"location":"git/customizing_git/#the-original-url-where-it-clone-from","title":"The original url where it clone from","text":"<pre><code>git config --get remote.origin.url\n</code></pre>"},{"location":"git/git_basic/","title":"Git basic","text":""},{"location":"git/git_basic/#initializing-a-repository-in-an-existing-directory","title":"Initializing a Repository in an Existing Directory","text":"<pre><code>git init\n</code></pre>"},{"location":"git/git_basic/#file-status","title":"File Status","text":""},{"location":"git/git_basic/#three-status","title":"Three Status","text":"<ol> <li>Modified: the file has been changed but not committed yet</li> <li>Staged: a modified file is marked in its current version to go into your next commit snapshot</li> <li>Ommitted: the data is safely stored in local database</li> </ol>"},{"location":"git/git_basic/#checking-the-status-of-your-files","title":"Checking the Status of Your Files","text":"<pre><code>git status\n</code></pre>"},{"location":"git/git_basic/#short-status","title":"Short Status","text":"<pre><code>git status -s\ngit status --short\n</code></pre> <p>There are two columns to the output\u2009\u2014\u2009the left-hand column indicates the status of the staging area and the right-hand column indicates the status of the working tree</p> <pre><code> M README # (1)\nMM Rakefile # (2)\nA  lib/git.rb # (3)\nM  lib/simplegit.rb  # (4)\n?? LICENSE.txt  # (5)\n</code></pre> <ol> <li>File is modified in the working directory but not yet staged</li> <li>Modified, staged and then modified again</li> <li>New files that have been added to the staging area</li> <li>Modified and staged</li> <li>New files that aren\u2019t tracked</li> </ol>"},{"location":"git/git_basic/#cloning-an-existing-repository","title":"Cloning an Existing Repository","text":"<pre><code>git clone https://github.com/libgit2/libgit2 mylibgit\n</code></pre>"},{"location":"git/git_basic/#trackingstaging-new-files","title":"Tracking/staging New Files","text":"<pre><code>git add README\n</code></pre>"},{"location":"git/git_basic/#viewing-changes","title":"Viewing Changes","text":"<p>git diff() only shows changes that are still unstaged. If you\u2019ve staged all of your changes, git diff will give you no output.</p> use git diff to see what is still unstaged<pre><code>git diff\n</code></pre> git diff --cached to see what got staged so far<pre><code>git diff --cached\n</code></pre> <p>If you want to see what you\u2019ve staged that will go into your next commit <pre><code>git diff --staged\n</code></pre></p>"},{"location":"git/git_basic/#committing-changes","title":"Committing Changes","text":"<pre><code>git commit\ngit commit -m \"Story 182: fix benchmarks for speed\" # (1)\ngit commit -a -m 'Add new benchmarks' # (2)\n</code></pre> <ol> <li>Inline commit message</li> <li>Skip the staging area</li> </ol>"},{"location":"git/git_basic/#removing-files","title":"Removing Files","text":""},{"location":"git/git_basic/#remove-files-from-staging-area","title":"Remove files from staging area","text":"<pre><code>git rm PROJECTS.md\ngit rm -f PROJECTS.md # (1)\n</code></pre> <ol> <li>If you modified the file or had already added it to the staging area, you must force the removal with the -f option</li> </ol>"},{"location":"git/git_basic/#keep-the-file-in-your-working-tree-but-remove-it-from-your-staging-area","title":"keep the file in your working tree but remove it from your staging area","text":"<pre><code>git rm --cached README\n</code></pre>"},{"location":"git/git_basic/#viewing-the-commit-history","title":"Viewing the Commit History","text":"<pre><code>git log\ngit log -- graph\n</code></pre>"},{"location":"git/git_basic/#undoing-things","title":"Undoing Things","text":""},{"location":"git/git_basic/#working-with-remotes","title":"Working with Remotes","text":"<p>Remote repositories are versions of your project that are hosted on the Internet or network somewhere.</p>"},{"location":"git/git_basic/#showing-your-remotes","title":"Showing Your Remotes","text":"<pre><code>git remote # (1)\ngit remote -v # (2)\n</code></pre> <ol> <li>Lists the shortnames of each remote handle you\u2019ve specified</li> <li>Shows the URLs that Git has stored for the shortname to be used when reading and writing to that remote</li> </ol>"},{"location":"git/git_basic/#adding-remote-repositories","title":"Adding Remote Repositories","text":"<pre><code>git remote add &lt;shortname&gt; &lt;url&gt; # (1)\n</code></pre> <ol> <li>The short name can be used to replace the full URL e.g. <code>git fetch pb</code></li> </ol>"},{"location":"git/git_basic/#fetching-and-pulling-from-your-remotes","title":"Fetching and Pulling from Your Remotes","text":"<p>git fetch command only downloads the data to your local repository\u2009\u2014\u2009it doesn\u2019t automatically merge it with any of your work or modify what you\u2019re currently working on. You have to merge it manually into your work when you\u2019re ready. <pre><code>git fetch &lt;remote&gt;\n</code></pre></p> <p>If your current branch is set up to track a remote branch , you can use the git pull command to automatically fetch and then merge that remote branch into your current branch. <pre><code>git pull\n</code></pre></p>"},{"location":"git/git_basic/#pushing-to-your-remotes","title":"Pushing to Your Remotes","text":"<pre><code>git push &lt;remote&gt; &lt;branch&gt;\ngit push origin master\n</code></pre>"},{"location":"git/git_basic/#inspecting-a-remote","title":"Inspecting a Remote","text":"<pre><code>git remote show &lt;remote&gt;\ngit remote show origin\n</code></pre>"},{"location":"git/git_basic/#renaming-and-removing-remotes","title":"Renaming and Removing Remotes","text":"change a remote\u2019s shortname<pre><code>git remote rename pb paul # (1)\n</code></pre> <ol> <li>rename pb to paul</li> </ol> remove<pre><code>git remote remove &lt;remote&gt;\n</code></pre>"},{"location":"git/git_branching/","title":"Git branching","text":""},{"location":"git/git_branching/#creating-a-new-branch","title":"Creating a New Branch","text":"<pre><code>git branch &lt;branch name&gt;\ngit branch testing\n</code></pre> <p><code>HEAD</code> is a pointer to the local branch you\u2019re currently on. The git branch command only created a new branch\u2009\u2014\u2009it didn\u2019t switch to that branch. So you\u2019re still on master branch instead of the new branch. </p>"},{"location":"git/git_branching/#switching-branches","title":"Switching Branches","text":"<p><pre><code>git checkout testing\n</code></pre> This moves HEAD to point to the testing branch.</p>"},{"location":"git/git_branching/#creating-a-new-branch-and-switching-to-it-at-the-same-time","title":"Creating a new branch and switching to it at the same time","text":"<pre><code>git checkout -b &lt;branch name&gt;\n</code></pre>"},{"location":"git/git_branching/#branch-merging","title":"Branch Merging","text":"<p>Merge iss53 branch into master     * check out the branch you wish to merge into     * run the git merge command</p> <pre><code>git checkout master\ngit merge iss53\n</code></pre> <pre><code>%%{init: { 'logLevel': 'debug', 'theme': 'base' } }%%\n---\ntitle: git merge\n---\ngitGraph\n   commit\n   commit\n   branch iss53\n   checkout iss53\n   commit\n   commit\n   checkout main\n   commit\n   merge iss53\n   commit\n   commit</code></pre>"},{"location":"git/git_branching/#branch-management","title":"Branch Management","text":""},{"location":"git/git_branching/#listing-current-branches","title":"Listing Current Branches","text":"<pre><code>git branch\ngit branch -v # (1)\ngit branch -a # (2)\n</code></pre> <ol> <li>To see the last commit on each branch</li> <li>To see all branch including remote branches (remote branches are in red)</li> </ol>"},{"location":"git/git_branching/#changing-a-branch-name","title":"Changing a branch name","text":"<pre><code>git branch --move bad-branch-name corrected-branch-name # (1)\ngit push --set-upstream origin corrected-branch-name # (2)\ngit push origin --delete bad-branch-name # (3)\n</code></pre> <ol> <li>Rename the branch locally</li> <li>Push the change</li> <li>Delete the branch with the bad name</li> </ol>"},{"location":"git/git_branching/#remote-branches","title":"Remote Branches","text":""},{"location":"git/git_branching/#remote-tracking-branch","title":"Remote-tracking Branch","text":"<ul> <li>Remote-tracking branches are references to the state of remote branches. They\u2019re local references that you can\u2019t move; Git moves them for you whenever you do any network communication, to make sure they accurately represent the state of the remote repository. Think of them as bookmarks, to remind you where the branches in your remote repositories were the last time you connected to them.</li> <li>Remote-tracking branch names take the form <code>&lt;remote&gt;/&lt;branch&gt;</code><ul> <li>the master branch on your origin remote: <code>origin/master</code></li> <li>a partner pushed up an iss53 branch: might have your own local iss53 branch, but the branch on the server would be represented by the remote-tracking branch <code>origin/iss53</code></li> </ul> </li> </ul>"},{"location":"git/git_branching/#tracking-branch","title":"Tracking Branch","text":"<ul> <li>Tracking branches are local branches that have a direct relationship to a remote branch. </li> <li>When you clone a repository, it generally automatically creates a master branch that tracks origin/master.</li> </ul> set up other tracking branches<pre><code>git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;\n</code></pre> set up tracking branch for a existing local branch<pre><code>git branch -u origin/serverfix\ngit branch --set-upstream-to origin/serverfix\n</code></pre> list tracking branches you have set up<pre><code>git fetch --all; git branch -vv\n  iss53     7e424c3 [origin/iss53: ahead 2] Add forgotten brackets\n  master    1ae2a45 [origin/master] Deploy index fix\n* serverfix f8674d9 [teamone/server-fix-good: ahead 3, behind 1] This should do it\n  testing   5ea463a Try something new\n</code></pre>"},{"location":"git/git_branching/#deleting-remote-branches","title":"Deleting Remote Branches","text":"<pre><code>git push origin --delete serverfix # (1)\n</code></pre> <ol> <li>delete your serverfix branch from the server</li> </ol>"},{"location":"git/git_branching/#rebasing","title":"Rebasing","text":"<p>With the rebase command, you can take all the changes that were committed on one branch and replay them on a different branch. check out the experiment branch and then rebase it onto the master branch<pre><code>git checkout experiment # (1)\ngit rebase master # (2)\ngit checkout master # (3)\ngit merge experiment # (4)\n</code></pre></p> <ol> <li>check out the experiment branch</li> <li>rebase it onto the master branch</li> <li>go back to the master branch</li> <li>do a fast-forward merge</li> </ol> rebase the server branch onto the master branch without having to check it out first<pre><code>git rebase master server # (1)\ngit checkout master # (2)\ngit merge server # (3)\n</code></pre> <ol> <li><code>git rebase &lt;basebranch&gt; &lt;topicbranch&gt;</code></li> <li>go to the master branch</li> <li>fast-forward the base branch (master)</li> </ol>"},{"location":"git/git_overview/","title":"Git overview","text":""},{"location":"git/git_overview/#flowchart","title":"Flowchart","text":""},{"location":"git/git_overview/#undo-things","title":"Undo Things","text":""},{"location":"git/git_overview/#remote-tracking-branch","title":"Remote-tracking Branch","text":""},{"location":"git/git_overview/#git-init","title":"<code>git init</code>","text":"<p>Initiate local repo</p> <pre><code>cd /Users/joy/Documents/R\ngit init\n</code></pre>"},{"location":"git/git_overview/#git-add","title":"<code>git add</code>","text":"<p>Track file/add to stage <pre><code>git add Git.Rmd\ngit add .\n</code></pre></p>"},{"location":"git/git_overview/#git-commit","title":"<code>git commit</code>","text":"Commit staged files and edit message in editor<pre><code>git commit\n</code></pre> Commit staged files and edit short message<pre><code>git commit -m 'enter message here'\n</code></pre> Stage and commit at the same time<pre><code>git commit -a -m 'message'\ngit commit -am 'message'\n</code></pre>"},{"location":"git/git_overview/#git-status","title":"<code>git status</code>","text":"Check git status<pre><code>git status\n</code></pre>"},{"location":"git/git_overview/#git-diff","title":"<code>git diff</code>","text":"Check file edit details (unstaged changes)<pre><code>git diff\n</code></pre> Check file edit details (between staged one and committed one)<pre><code>git diff --staged\n</code></pre>"},{"location":"git/git_overview/#git-log","title":"<code>git log</code>","text":"Check history commit<pre><code>git log\ngit log --pretty=oneline \ngit log --pretty=format:\"%h-%an, %ar:%s\" \ngit log --graph\ngit log --graph --all\n</code></pre> <ul> <li><code>%h</code> simple hash</li> <li><code>%an</code> author</li> <li><code>%ar</code> edit date (from now)</li> <li><code>%ad</code> edit date</li> <li><code>%s</code> message</li> </ul> <p>Check part of the log history<pre><code>git log featureA..origin/featureA\n</code></pre> show the commit list included in the later branch (origin/featureA) but not in the former (featureA)</p>"},{"location":"git/git_overview/#git-clone","title":"<code>git clone</code>","text":"Create bare repository<pre><code>git clone --bare /Users/joy/Documents/R R.git\n</code></pre> Clone the entire repo<pre><code>git clone https://github.com/JoyDing0330/Rnote.git\n</code></pre> Cloning to a specific folder<pre><code>git clone &lt;repo&gt; &lt;directory&gt;\ngit clone ssh://john@example.com/path/to/my-project.git my-project\n</code></pre>"},{"location":"git/git_overview/#git-push","title":"<code>git push</code>","text":"Push to main branch<pre><code>git push origin main\n</code></pre> Push to feature1 branch<pre><code>git push origin feature1\n</code></pre> Push local feature1 branch to remote feature2 branch in origin repo<pre><code>git push origin feature1:feature2\n</code></pre> Push the locally new-created branch featureA to remote origin<pre><code>git push -u origin featureA\ngit push --set-upstream origin featureA\n</code></pre> Push the locally new-created branch featureB to the branch featureBee on remote origin<pre><code>git push -u origin featureB:featureBee\ngit push remote_name local_branch:remote_branch\n</code></pre> Delete remote branch<pre><code>git push origin --delete serverfix\n</code></pre>"},{"location":"git/git_overview/#git-checkout","title":"<code>git checkout</code>","text":"Change to feature1 branch<pre><code>git checkout feature1\ngit switch feature1\n</code></pre> Create branch and switch to that branch<pre><code>git checkout -b feature2\n</code></pre> Create a local branch named serverfix from remote origin/feature1<pre><code>git checkout -b serverfix origin/feature```\n\n## `git fetch`\n\n``` git title='Fetch the master branch from remote to local origin/mymaster'\ngit fetch origin master:refs/remotes/origin/mymaster\n</code></pre> Fetch multiple branches<pre><code>fit fetch origin master:refs/remotes/origin/mymaster \\ topic:refs/remotes/origin/topic\n</code></pre> Fetch all of the tracked branches<pre><code>git fetch --all\n</code></pre>"},{"location":"git/git_overview/#git-rebase","title":"<code>git rebase</code>","text":"Rebase the topicbranch to the basebranch<pre><code>git rebase &lt;basebranch&gt; &lt;topicbranch&gt;\n</code></pre> <p>Or Rebase the topicbranch to the basebranch<pre><code>git checkout &lt;topicbranch&gt;\ngit rebace &lt;basebranch&gt;\n</code></pre></p>"},{"location":"git/git_overview/#git-reset","title":"<code>git reset</code>","text":"<p><pre><code>head # this commit\nhead~ # last commit\nhead~2 # the one before last commit\n</code></pre> Cancel the commit but the file is still stages (soft)<pre><code>git reset head~ --soft\n</code></pre></p> Cancel the commit and the file is not staged<pre><code>git reset head~\n</code></pre> Cancel the commit and remove the edits<pre><code>git reset head~ --hard\n</code></pre>"},{"location":"git/git_overview/#git-stash","title":"<code>git stash</code>","text":"Save the unfinished work and keep the working directory clean to checkout to another branch<pre><code>git stash\n</code></pre> Restore the saved work<pre><code>git stash apply`\n</code></pre> Get the store list, {0} is the last one<pre><code>git stash list\n</code></pre> Get the previous save thing<pre><code>git stash apply stash@{2}\n</code></pre> Drop a stash record<pre><code>get stash drop stash@{0}\n</code></pre>"},{"location":"git/git_overview/#git-sqush","title":"<code>git sqush</code>","text":"<pre><code>git checkout -b featureBV2 origin/master\ngit merge --squash featureB\n</code></pre>"},{"location":"git/git_overview/#gitignore","title":"<code>.gitignore</code>","text":"ignore all except one folder/file<pre><code>*\n!folder\n!folder/*\n</code></pre>"},{"location":"git/git_overview/#show-current-local-repository","title":"Show current local repository","text":"<p><code>git rev-parse --show-toplevel</code></p>"},{"location":"git/git_overview/#nano-editing","title":"Nano Editing","text":"<ul> <li><code>Ctrl+O</code> or <code>i</code> enter message</li> <li><code>Ctrl+X</code> or <code>Ese:wq</code> exit</li> <li><code>Ctrl+C</code> cancel</li> </ul>"},{"location":"git/git_overview/#branches","title":"Branches","text":"<ul> <li>The refs for local branches are stored in the <code>./.git/refs/heads/</code></li> <li>Remote branch refs live in the <code>./.git/refs/remotes/</code></li> <li>To view your remote branches, simply pass the -r flag to the git branch command. <code>git branch -r</code></li> <li>If you wish to set tracking information for this branch you can do so with: <code>git branch --set-upstream-to=origin/&lt;branch&gt; add_line</code></li> </ul>"},{"location":"git/git_tool/","title":"Git tool","text":""},{"location":"git/git_tool/#revision-selection","title":"Revision Selection","text":""},{"location":"python/","title":"Python","text":""},{"location":"python/#packages-references","title":"Packages References","text":"<ul> <li> Numpy \u2013 Multidimensional array operation tool</li> <li> Pandas \u2013 Practical, real-world data analysis tool</li> </ul>"},{"location":"python/#data-analysis","title":"Data Analysis","text":"<ul> <li> Read and write data \u2013 Customize the behavior of the header, add an announcement bar</li> <li> Data inspection \u2013 Create a clear, concise, and comprehensive navigation structure</li> <li> Data cleaning \u2013 Add links to your social media profiles or websites in the footer</li> <li> Data selecting \u2013 Set up and configure search, running entirely in the user's browser</li> <li> Data aggregation \u2013 Categorize your pages with tags and group related pages</li> <li> Table reshaping \u2013 Categorize your pages with tags and group related pages</li> </ul>"},{"location":"python/#object-oriented-programing","title":"Object Oriented Programing","text":""},{"location":"python/some_tips_python/","title":"Some tips python","text":""},{"location":"python/some_tips_python/#setup-formatter","title":"Setup Formatter","text":"<ul> <li><code>pip install black</code></li> <li><code>View</code> &gt; <code>Command Palette</code> (or <code>Shift</code>+<code>cmd</code>+<code>p</code>)</li> <li>Preferences: Open User Settings (JSON)</li> <li>Add the following lines to the settings file: <pre><code>{\n    \"python.formatting.provider\": \"black\",\n    \"[python]\": {\n        \"editor.defaultFormatter\": \"ms-python.black-formatter\",\n        \"editor.formatOnSave\": true # ensures that Black runs automatically every time you save a file.\n    }\n}\n</code></pre></li> <li> <p>Manually Format a File: Press <code>Shift</code> + <code>Alt</code> + <code>F</code> (or <code>Shift</code> + <code>Option</code> + <code>F</code> on macOS)</p> </li> <li> <p>Format from the terminal <pre><code>black your_script.py\n</code></pre></p> </li> </ul>"},{"location":"python/some_tips_python/#setup-snippets","title":"Setup Snippets","text":""},{"location":"python/oop/decorator/","title":"Decorator","text":"<pre><code>def decorator(func):\n    def wrapper():\n        print(\"Do something before calling the function.\")\n        func()\n        print(\"Do something after calling the function.\")\n    return wrapper\n\n@decorator\ndef greet():\n    print(\"Hello, world!\")\n\ngreet()\n</code></pre>"},{"location":"python/pandas_numpy/data_aggregation/","title":"Data aggregation","text":""},{"location":"python/pandas_numpy/data_aggregation/#aggregate-and-count-occurance","title":"Aggregate and count occurance","text":"<pre><code># method 1\ndf.groupby('Company Name', as_index=False).agg(MySum=('Amount', 'sum'), MyCount=('Amount', 'count'))\n\n# method 2\ndf.groupby(['name'], as_index=False).agg({'value': 'sum', 'otherstuff': 'first'})\n</code></pre>"},{"location":"python/pandas_numpy/data_aggregation/#aggregate-and-count-distinct","title":"Aggregate and count distinct","text":"<pre><code>df = daily_sales.groupby(['date_id','make_name'], as_index=False).agg(\n    unique_leads=('lead_id', lambda x: x.nunique()),\n    unique_partners=('partner_id', lambda x: x.nunique())\n    )\n</code></pre>"},{"location":"python/pandas_numpy/data_aggregation/#aggregate-and-get-max-include-ties","title":"Aggregate and get max (include ties)","text":"<pre><code># Create dummy date\ndf = pd.DataFrame({\n    'col1': ['A', 'A', 'A', 'A', 'A', 'B', 'B', 'B', 'B', 'B', 'B', 'C', 'C', 'C', 'C', 'C'],\n    'col2': ['AX', 'AX', 'AY', 'AY', 'AY', 'BX', 'BX', 'BX', 'BY', 'BY', 'BY', 'CX', 'CX', 'CX', 'CX', 'CX'],\n})\n\n# Get Max Value by Group with Ties\ndf_count = df.groupby('col1', as_index=0)['col2'].value_counts()\nmax_index = df_count.groupby(['col1'])['count'].transform(max) == df_count['count']\ndf1 = df_count[max_index]\n</code></pre>"},{"location":"python/pandas_numpy/data_aggregation/#aggregate-and-get-max-ignore-ties","title":"Aggregate and get max (ignore ties)","text":"<pre><code># method 1\ndf=df.loc[df.groupby([\"departmentId\", \"Department\"])[\"Salary\"].idxmax()]\n\n# method 2\ndf1 = (df\n .groupby('col1')['col2']\n .value_counts()\n .groupby(level=0)\n .head(1))\n</code></pre>"},{"location":"python/pandas_numpy/data_aggregation/#aggregate-and-concatenate","title":"Aggregate and concatenate","text":"<pre><code># method 1: using list and rename at the same time\ndf = activities.groupby(['sell_date'], as_index=False).agg(\n    num_sold=('product', 'count'),\n    products=('product', lambda x: ','.join(x))\n    )\n\n# method 2: using dict\ndf = activities.groupby(['sell_date'], as_index=False).agg(\n    {'product': ['count', lambda x: ','.join(x)]}\n    )\n</code></pre>"},{"location":"python/pandas_numpy/data_cleaning/","title":"Data cleaning","text":""},{"location":"python/pandas_numpy/data_cleaning/#change-data-type","title":"Change data type","text":"from char to int<pre><code>df['grade'] = df['grade'].astype(int)\n</code></pre> <pre><code>df = df.astype({\n    'A': 'int64',\n    'B': 'float64',\n    'C': 'datetime64[ns]'\n})\n</code></pre>"},{"location":"python/pandas_numpy/data_cleaning/#drop-duplicate-rows","title":"Drop duplicate rows","text":"<pre><code>df.drop_duplicates(subset=['A','B','C'], inplace=True, keep='first')\n</code></pre>"},{"location":"python/pandas_numpy/data_cleaning/#drop-missing-data","title":"Drop missing data","text":"<pre><code>df=df.dropna(\n    axis=0,   # (1)\n    how='any' # (2)\n    subset=['A','B'],\n    inplace=True # (3)\n    )\n</code></pre> <ol> <li>axis{0 or \u2018index\u2019, 1 or \u2018columns\u2019}, default 0</li> <li>how{\u2018any\u2019, \u2018all\u2019}, default \u2018any\u2019<ul> <li>\u2018any\u2019 : If any NA values are present, drop that row or column.</li> <li>\u2018all\u2019 : If all values are NA, drop that row or column.</li> </ul> </li> <li>Whether to modify the DataFrame rather than creating a new one.</li> </ol>"},{"location":"python/pandas_numpy/data_cleaning/#fill-missing-data","title":"Fill missing data","text":"<pre><code>df[col]=df[col].fillna(value)\n</code></pre>"},{"location":"python/pandas_numpy/data_cleaning/#arrange-columns","title":"Arrange columns","text":"<pre><code>df.sort_values(\n    by=['a', 'b'],\n    ascending=[True, False],\n    inplace=True,\n    na_position='last' # (1)\n    )\n</code></pre> <ol> <li>{\u2018first\u2019, \u2018last\u2019}, default \u2018last\u2019     Puts NaNs at the beginning if first; last puts NaNs at the end.</li> </ol>"},{"location":"python/pandas_numpy/data_cleaning/#rename-columns","title":"Rename columns","text":"<pre><code>df.rename(\n    columns={'old_name1':'new_name1', 'old_name2':'new_name2'},\n    inplace=True\n    )\n</code></pre>"},{"location":"python/pandas_numpy/data_cleaning/#modify-columns","title":"Modify columns","text":"compute rank<pre><code>df['rank'] = df['score'].rank(\n    method='dense', # (1)\n    ascending=False,\n    na_option='keep' # (2)\n    ).astype(int)\n</code></pre> <ol> <li>{\u2018average\u2019, \u2018min\u2019, \u2018max\u2019, \u2018first\u2019, \u2018dense\u2019}, default \u2018average\u2019 How to rank the group of records that have the same value (i.e. ties):<ul> <li>average: average rank of the group</li> <li>min: lowest rank in the group</li> <li>max: highest rank in the group</li> <li>first: ranks assigned in order they appear in the array</li> <li>dense: like \u2018min\u2019, but rank always increases by 1 between - groups (assign different rank for ties).</li> </ul> </li> <li>{\u2018keep\u2019, \u2018top\u2019, \u2018bottom\u2019}, default \u2018keep\u2019<ul> <li>keep: assign NaN rank to NaN values</li> <li>top: assign lowest rank to NaN values</li> <li>bottom: assign highest rank to NaN values</li> </ul> </li> </ol> compute rank<pre><code>df.assign(\n    rank=lambda x: x[\"date\"].rank(method=\"first\")\n    )\n</code></pre> create new column based on condition<pre><code>df['level'] = np.where((df['value1'] &gt;= 4) &amp; (df['value2'] &gt;= 10), 'High', 'Low')\n</code></pre> create new column based on more than one conditions<pre><code># Method 1\ndf['cat'] = pd.cut(df['val'], [-1,2,5,10], labels=['low', 'medium', 'high'])\n\n# Method 2\nconditions = [\n    df['income'] &lt; 20000,\n    df['income'].between(20000, 50000, inclusive='both'),\n    df['income'] &gt; 50000\n]\ncategories = [\"Low Salary\", \"Average Salary\", \"High Salary\"]\ndf['category'] = np.select(conditions, categories, default=\"Unknown\")\n</code></pre>"},{"location":"python/pandas_numpy/data_cleaning/#add-new-columns","title":"Add new columns","text":"<pre><code>employees['bonus'] = employees['salary']*2\n</code></pre> <pre><code>df['bonus'] = df.apply(\n    lambda row: row['salary'] if row['employee_id'] % 2 == 1 and not row['employee_name'].startswith('M')\n        else 0,\n    axis=1\n    )\n</code></pre> calculate date difference between two date columns<pre><code>df.assign(\n  new_col=lambda x: (\n    x.date1 - x.date2\n  ).dt.days\n)\n</code></pre> calculate the # of days delay between each confirmed cases<pre><code>df.assign(\n  day_lag=lambda x: (\n    x.groupby([\"cola\", \"colb\"], as_index=False)[\n      \"date\"\n    ]\n    .diff() # date difference\n    .shift(-1) # move ahead\n    .dt.days # convert into integer\n  )\n)\n</code></pre> assign value based on condition<pre><code>df.assign(\n  value=lambda x: np.where(x.ID == 12345, \"10\", \"20\")\n)\n</code></pre> dynamically set the column name using variable values<pre><code>df.assign(**{column:lambda x: (x[column].str.upper().str.strip())})\n</code></pre>"},{"location":"python/pandas_numpy/data_cleaning/#reset-index","title":"Reset index","text":"<pre><code>df['id']=df.reset_index(drop=True).index+1\n</code></pre>"},{"location":"python/pandas_numpy/data_inspection/","title":"Data inspection","text":""},{"location":"python/pandas_numpy/data_inspection/#check-basic-information","title":"Check basic information","text":"<p>prints information about a DataFrame including the index dtype and columns, non-null values and memory usage. <pre><code>df.info()\n</code></pre></p>"},{"location":"python/pandas_numpy/data_inspection/#describe-the-data","title":"Describe the data","text":"<p>Descriptive statistics include those that summarize the central tendency, dispersion and shape of a dataset\u2019s distribution, excluding NaN values.</p> <pre><code>df.describe()\n</code></pre>"},{"location":"python/pandas_numpy/data_inspection/#check-the-dimensions-of-dataframe","title":"check the dimensions of dataframe","text":"<pre><code>df.shape\n</code></pre>"},{"location":"python/pandas_numpy/data_inspection/#check-the-column-name-of-dataframe","title":"Check the column name of dataframe","text":"<pre><code>df.column\n</code></pre>"},{"location":"python/pandas_numpy/data_inspection/#show-data-heads-and-tails","title":"Show data heads and tails","text":"<pre><code>df.head()\ndf.tail()\n</code></pre>"},{"location":"python/pandas_numpy/data_inspection/#show-all-unique","title":"Show all unique","text":"<pre><code>df.column.unique()\n</code></pre>"},{"location":"python/pandas_numpy/data_inspection/#print-formated-table","title":"print formated table","text":"<pre><code>print(\n    tabulate(\n        df,\n        headers=\"keys\",\n        tablefmt=\"psql\",\n    )\n)\n</code></pre>"},{"location":"python/pandas_numpy/data_selecting/","title":"Data selecting","text":""},{"location":"python/pandas_numpy/data_selecting/#select-columns-by-column-names","title":"Select columns by column names","text":"Select columns by pattern<pre><code>df.filter(regex='name|address|date*')\n</code></pre>"},{"location":"python/pandas_numpy/data_selecting/#filter-by-value","title":"Filter by value","text":"<pre><code>students.loc[students['student_id'] == 101]\ndf.query('col1 &lt;= 1 &amp; 1 &lt;= col1')\n</code></pre>"},{"location":"python/pandas_numpy/data_selecting/#filter-by-conditions","title":"Filter by conditions","text":"query<pre><code>result = df.query('column &gt; value and other_column &lt; other_value')\ndf = df.query('date.isnull()')\n</code></pre> lambda<pre><code>df = df.loc[lambda x: (x.cola != \"YES\") &amp; (x.colb != \"YES\")]\n</code></pre> Filter by multiple conditions<pre><code> df = df.loc[(df['area'] &gt;= 3000000)|(df['population'] &gt;= 25000000)]\n</code></pre> Filter by value in another list<pre><code>df = df[df['A'].isin([3, 6])]\n</code></pre> filter by value not in another list<pre><code># Tilde operator\ndf = df[~df.group.isin([\"A\",\"B\",\"D\"])]\n\n# False condition\ndf = df[df.group.isin([\"A\",\"B\",\"D\"])==False]\n</code></pre>"},{"location":"python/pandas_numpy/data_selecting/#filter-the-max-value","title":"Filter the max value","text":"<pre><code>df=df.loc[df['count'] == df['count'].max()]\n</code></pre>"},{"location":"python/pandas_numpy/data_selecting/#loc","title":"loc","text":"return the row as a Series<pre><code>df.loc['viper']\n</code></pre> select rows or columns as a DataFrame<pre><code>df.loc[['row1', 'row2']]\ndf.loc[['col1', 'col2']]\n</code></pre> select by row and column<pre><code>df.loc['row', 'col']\ndf.loc[:, 'C':'E']\n</code></pre>"},{"location":"python/pandas_numpy/data_selecting/#iloc","title":"iloc","text":"<pre><code>df.iloc[N-1]['salary'] # ???\n</code></pre>"},{"location":"python/pandas_numpy/read_and_write_data/","title":"Read and write data","text":""},{"location":"python/pandas_numpy/read_and_write_data/#create-a-dataframe-from-list","title":"Create a dataframe from list","text":"<pre><code>list1 = ['A', 'B', 'C', 'D', 'E']\nlist2 = [1, 2, 3, 4, 5]\n\ndf = pd.DataFrame(list(zip(list1, list2)), columns =['Name', 'value'])\n</code></pre>"},{"location":"python/pandas_numpy/read_and_write_data/#create-a-dataframe-from-dict","title":"Create a dataframe from dict","text":"<pre><code>d = {f'getNthHighestSalary({N})': [111, 222, 333]}\ndf = pd.DataFrame(data=d)\n</code></pre>"},{"location":"python/pandas_numpy/string_manipulation/","title":"String manipulation","text":"str.len<pre><code>df=tweets[tweets[\"content\"].str.len()&gt;15][[\"tweet_id\"]]\n</code></pre> str.contains<pre><code>df = patients[patients['conditions'].str.contains(r'(^DIAB1|\\sDIAB1)', na=False)] # (1)\n</code></pre> <ol> <li><code>\\s</code> matches whitespace (spaces, tabs and new lines)</li> </ol> str.match<pre><code>pattern = r'^[a-zA-Z][a-zA-Z0-9_.-]*@leetcode\\.com$'\n\n# Filter valid emails\ndf = users[users['mail'].str.match(pattern, na=False)]\n</code></pre> str.capitalize<pre><code>users['name'] = users['name'].str.capitalize()`  # (1)\n</code></pre> <ol> <li> <ul> <li><code>Series.str.lower</code>: Converts all characters to lowercase.</li> <li><code>Series.str.upper</code>: Converts all characters to uppercase.</li> <li><code>Series.str.title</code>: Converts first character of each word to uppercase and remaining to lowercase.</li> <li><code>Series.str.capitalize</code>: Converts first character to uppercase and remaining to lowercase.</li> <li><code>Series.str.swapcase</code>: Converts uppercase to lowercase and lowercase to uppercase.</li> <li><code>Series.str.casefold</code>: Removes all case distinctions in the string.</li> </ul> </li> </ol> start with<pre><code>df['employee_name'].startswith('M')\n</code></pre>"},{"location":"python/pandas_numpy/table_reshaping/","title":"Table reshaping","text":""},{"location":"python/pandas_numpy/table_reshaping/#concatenate-data","title":"Concatenate data","text":"<pre><code>df = pd.concat(\n    [df1, df2],\n    axis=0\n    )\n</code></pre>"},{"location":"python/pandas_numpy/table_reshaping/#merge-data","title":"Merge data","text":"<pre><code>df1.merge(\n  df2,\n  how=\"right\", # (1)\n  on=[\"cola\", \"colb\"],\n  suffixes=(\"_all\", \"_roommate\")\n)\n</code></pre> <ol> <li> <ul> <li>left: use only keys from left frame, similar to a SQL left outer join; preserve key order.</li> <li>right: use only keys from right frame, similar to a SQL right outer join; preserve key order.</li> <li>outer: use union of keys from both frames, similar to a SQL full outer join; sort keys lexicographically.</li> <li>inner: use intersection of keys from both frames, similar to a SQL inner join; preserve the order of the left keys.</li> <li>cross: creates the cartesian product from both frames, preserves the order of the left keys.</li> </ul> </li> </ol>"},{"location":"python/pandas_numpy/table_reshaping/#pivot-long-to-wide","title":"Pivot: long to wide","text":"<pre><code>pivoted = weather.pivot(\n    index=\"month\",\n    columns=\"city\",\n    values=\"temperature\"\n    )\n</code></pre>"},{"location":"python/pandas_numpy/table_reshaping/#melt-wide-to-long","title":"Melt: wide to long","text":"<pre><code>report1 = pd.melt(\n    report,\n    id_vars=['product'],\n    value_vars=['quarter_1', 'quarter_2', 'quarter_3', 'quarter_4'],\n    var_name='quarter',\n    value_name='sales'\n    )\n</code></pre>"},{"location":"python/pandas_numpy/table_reshaping/#split","title":"Split","text":"split a dataframe into a list by a column value<pre><code># create a demo data\ndata = {\n    'Category': ['A', 'B', 'A', 'B', 'C', 'A', 'C'],\n    'Value': [10, 20, 30, 40, 50, 60, 70]\n}\ndf = pd.DataFrame(data)\n\n# Group by 'Category' and split into a list of DataFrames\ngrouped_df = df.groupby('Category')\nlist_of_dfs = [group for _, group in grouped_df]\n\n# Display the list of DataFrames\nfor i, group_df in enumerate(list_of_dfs):\n    print(f\"Group {i+1}:\\n{group_df}\\n\")\n\n# check group keys\nprint(grouped_df.groups.keys())\n# get group\ngrouped_df.get_group('A')\n</code></pre>"}]}